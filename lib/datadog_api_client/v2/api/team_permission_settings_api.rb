=begin
#Datadog API V2 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V2
  class TeamPermissionSettingsAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Get permission settings for a team.
    #
    # @see #get_team_permission_settings_with_http_info
    def get_team_permission_settings(team_id, opts = {})
      data, _status_code, _headers = get_team_permission_settings_with_http_info(team_id, opts)
      data
    end

    # Get permission settings for a team.
    #
    # Get all permission settings for a given team.
    #
    # @param team_id [String] None
    # @param opts [Hash] the optional parameters
    # @return [Array<(TeamPermissionSettingsResponse, Integer, Hash)>] TeamPermissionSettingsResponse data, response status code and response headers
    def get_team_permission_settings_with_http_info(team_id, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamPermissionSettingsAPI.get_team_permission_settings ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamPermissionSettingsAPI.get_team_permission_settings"
      end
      # resource path
      local_var_path = '/api/v2/team/{team_id}/permission-settings'.sub('{team_id}', CGI.escape(team_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TeamPermissionSettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :get_team_permission_settings,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Get, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamPermissionSettingsAPI#get_team_permission_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update permission setting for team.
    #
    # @see #update_team_permission_setting_with_http_info
    def update_team_permission_setting(team_id, action, body, opts = {})
      data, _status_code, _headers = update_team_permission_setting_with_http_info(team_id, action, body, opts)
      data
    end

    # Update permission setting for team.
    #
    # Update a team permission setting for a given team.
    #
    # @param team_id [String] None
    # @param action [String] None
    # @param body [TeamPermissionSettingUpdateRequest] 
    # @param opts [Hash] the optional parameters
    # @return [Array<(TeamPermissionSettingResponse, Integer, Hash)>] TeamPermissionSettingResponse data, response status code and response headers
    def update_team_permission_setting_with_http_info(team_id, action, body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamPermissionSettingsAPI.update_team_permission_setting ...'
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamPermissionSettingsAPI.update_team_permission_setting"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling TeamPermissionSettingsAPI.update_team_permission_setting"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TeamPermissionSettingsAPI.update_team_permission_setting"
      end
      # resource path
      local_var_path = '/api/v2/team/{team_id}/permission-settings/{action}'.sub('{team_id}', CGI.escape(team_id.to_s).gsub('%2F', '/')).sub('{action}', CGI.escape(action.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TeamPermissionSettingResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :update_team_permission_setting,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V2"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Put, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamPermissionSettingsAPI#update_team_permission_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
